const swaggerAutogen = require("swagger-autogen")({openapi:"3.0.0"})
var log = require('npmlog')
const doc = {
  info: {
      version: "1.0.0",
      title: "Skill Tree API-Plaform",
      description: "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  basePath: "/",
  schemes: ['http', 'https'],
  consumes: ['application/json'],
  produces: ['application/json'],
  tags: [
      {
            "name": "User",
            "description": "The endpoints for User information"
      },
      {
            "name": "Skills",
            "description": "The endpoints for Skills"
    }
  ],
  securityDefinitions: {
      apiKeyAuth:{
          type: "apiKey",
          in: "header",       // can be "header", "query" or "cookie"
          name: "API-KEY",  // name of the header, query parameter or cookie
          description: "A key used to communicate with the API"
      }
  },
  definitions: {
    User: {
        username: "a_user",
        password: "mias87dh32d7h36gdasdghyh1ds8326ga6w8d",
        skill_data: ["a","b","c"]
    },
    Skill: {
        iconName: "Icon_A",
        title: "Example_I",
        level: "",
        goal: "",
        time: "",
        frequency: ["daily","weekly","monthly", "annually"],
        xp: 10,
        category: "",
        requirements: [],
        children: []
    },
    AddSkill: {
        skill_name: "Example_A",
        category: "Category_A",
        parent_skill: "Example_0"
    },
    AddUser: {
        $username: "Jhon Doe",
        $password: "mias87dh32d7h36gdasdghyh1ds8326ga6w8d",
        skill_data: ["a","b","c"]
    }

  },


  servers: [
        {
            url: "http://localhost:8080/",
            description: 'Development server',
        },
        {
            url: "http://xxx:xxx/",
            description: 'Production server'
        }
  ]
}

const outputFile = './swagger-output.json'
const endpointsFiles = ['./src/api/routes/v1/*.routes.js']

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
    require("./src/index")
}).catch((err) => {
    log.error(err)
})